from config import stocks
import csv
from datetime import datetime
import statistics
import matplotlib.pyplot as plt
from math import modf, trunc, ceil

stddevs = []

def get_stocks_info():
    '''
    Function name: get_stocks_info
    It does not receive parameters.
    It reads the files containing stocks information, and generates their weekly standard deviation.
    '''

    # for each stock name contained in config file, get stock information 
    for stock in stocks:
        stock_data = []
        file_name = stock + ".csv"
        with open(file_name, "r") as infile:
            reader = csv.DictReader(infile)

            first = True
            week_values = []
            for row in reader:
                row["stock"] = stock
                row["week"] = datetime.strptime(row["date"], '%Y-%m-%d').isocalendar()[1]

                new_week = int(datetime.strptime(row["date"], '%Y-%m-%d').isocalendar()[1])

                # for the first value obtained, it always will be appended to the list
                if first == True:
                    first = False
                    week_values.append(float(row["closing"]))
                    week = new_week
                # for the subsequent values, it is validated if they correspond to the same week, or a different week
                else:
                    if new_week == week:
                        week_values.append(float(row["closing"]))
                    else:
                        if len(week_values) > 1:
                            stddev = statistics.stdev(week_values)
                            stddevs.append({"stock":stock, "week":week, "stddev":stddev})
                        week_values = []
                        week = new_week

def prepare_std_devs_graph():
    '''
    Function name: prepare_std_devs_graph
    It does not receive parameters.
    It uses the weekly standard deviations generated by the get_stocks_info() function
    and generate the corresponding graphs of weekly std devs for each of the stocks.
    '''
    number_of_stocks = len(stocks)

    integer_part = trunc(number_of_stocks / 3)
    decimal_part = modf(number_of_stocks / 3)
    decimal_part = round(decimal_part[0], 2)
    decimal_part = int(decimal_part * 100)

    # depending of the number of stocks, we are going to create the number of rows on our graphic

    if decimal_part == 0:
        number_of_rows = int(integer_part)
    else:
        number_of_rows = int(integer_part) + 1

    stock_number = 1

    # for each stock name contained in config file, get stock information 
    for stock in stocks:
        week = []
        stddev = []

        # for each value in the stddevs list, we populate two lists, one to identify the week, and another one for std devs
        for s in stddevs:
            if s["stock"] == stock:
                week.append(s["week"])
                stddev.append(s["stddev"])

        # creating the subplot object with two rows, three columns and a sequence of stocks
        # setting the number of rows

        plt.subplot(number_of_rows, 3, stock_number)
        plt.plot(week, stddev, label = stock)
        plt.title(stock)
        plt.xlabel("Week")
        plt.ylabel("Std Dev")
        stock_number += 1

# finally, we invoke the functions to read the stocks, create the graph, and the show the graph

#read the stocks
get_stocks_info()

#create the graph
prepare_std_devs_graph()

#show the graph
plt.show()






